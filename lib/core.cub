void print(string value) {
  native bear_print(value);
}

void exit(u8 code) {
  native exit(code);
}

u32 read() {
  u32 code;
  native code = bear_read();
  return code;
}

string stringFromArray(u8[] buffer, u32 start, u32 end) {
  u32 length = end - start + 1;
  u8[] copy = new u8[length];

  for (u32 i = 0; i < length; ++i) {
    copy[i] = buffer[i + start];
  }

  return <string> copy;
}

string stringFromCode(u8 code) {
  u8[] buffer = new u8[1];
  buffer[0] = code;

  return <string> buffer;
}

u8 log10(u8 v) {
  return (v >= 100) ? 2 : ((v >= 10) ? 1 : 0);
}

string u8ToString(u8 value) {
  u8 size = value ? <u8>(log10(value) + 1) : 1;
  u8[] buffer = new u8[size];

  u8 i = <u8>(size - 1);
  for (;;) {
    buffer[i] = <u8>(48 + value % 10);
    value /= 10;
    if (i == 0) break;
    --i;
  }

  return <string> buffer;
}
